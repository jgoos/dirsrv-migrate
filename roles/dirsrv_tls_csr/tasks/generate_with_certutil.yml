---
- name: Set CSR and NSS DB paths for instance (certutil)
  ansible.builtin.set_fact:
    dirsrv_csr_csr_path: "/etc/dirsrv/slapd-{{ dirsrv_csr_instance }}/{{ dirsrv_csr_server_cert_filename }}"
    dirsrv_csr_nssdb_dir: "/etc/dirsrv/slapd-{{ dirsrv_csr_instance }}"
  tags: [tls, csr]

- name: Stat CSR path before generation (certutil)
  ansible.builtin.stat:
    path: "{{ dirsrv_csr_csr_path }}"
  register: _csr_stat_pre
  tags: [tls, csr]

- name: Assert certutil present when fallback needed
  ansible.builtin.assert:
    that:
      - (_certutil_stats.results | selectattr('stat.exists', 'equalto', true) | list | length) > 0
    fail_msg: "certutil not found. Install nss-tools for fallback CSR generation."
  tags: [preflight, tls, csr]

- name: Locate NSS DB password file (pin.txt or pwdfile.txt)
  block:
    - name: Stat NSS pin.txt
      ansible.builtin.stat:
        path: "{{ [dirsrv_csr_nssdb_dir, 'pin.txt'] | path_join }}"
      register: _pin_stat
    - name: Stat NSS pwdfile.txt
      ansible.builtin.stat:
        path: "{{ [dirsrv_csr_nssdb_dir, 'pwdfile.txt'] | path_join }}"
      register: _pwd_stat
    - name: Choose NSS password file path
      ansible.builtin.set_fact:
        dirsrv_csr_pwdfile: >-
          {{ (_pin_stat.stat.exists | default(false))
              | ternary(
                  _pin_stat.stat.path,
                  (_pwd_stat.stat.exists | default(false))
                    | ternary(_pwd_stat.stat.path, '')
                )
          }}
    - name: Assert NSS password file exists
      ansible.builtin.assert:
        that:
          - dirsrv_csr_pwdfile | length > 0
        fail_msg: "pin.txt/pwdfile.txt not found in {{ dirsrv_csr_nssdb_dir }}; required for NSS DB access."
  tags: [tls, csr]

- name: Build certutil key args
  ansible.builtin.set_fact:
    dirsrv_csr_certutil_key_args: >-
      {{ ((dirsrv_csr.key_type | default('rsa')) == 'ecdsa')
          | ternary(
              ['-k','ec','-q', (dirsrv_csr.ecdsa_curve | default('prime256v1'))],
              ['-k','rsa','-g', ((dirsrv_csr.key_size | default(4096)) | string)]
            ) }}
  tags: [tls, csr]

- name: Build certutil extSAN string
  ansible.builtin.set_fact:
    dirsrv_csr_extsan: >-
      {{ (
            (dirsrv_csr_dns_sans | default([]) | map('regex_replace', '^', 'dns:') | list)
            +
            (dirsrv_csr_ip_sans | default([]) | map('regex_replace', '^', 'ip:') | list)
         ) | join(',') }}
  tags: [tls, csr]

- name: Generate CSR with certutil
  ansible.builtin.command:
    argv: "{{ [
      dirsrv_certutil_bin, '-R',
      '-d', ('sql:' ~ dirsrv_csr_nssdb_dir),
      '-f', dirsrv_csr_pwdfile,
      '-s', dirsrv_csr_subject,
      '--extSAN', dirsrv_csr_extsan,
      '-Z', (dirsrv_csr.sig_algo | default('SHA256')),
      '-a', '-o', dirsrv_csr_csr_path
    ] + (dirsrv_csr_certutil_key_args | default([])) }}"
  register: _certutil_gen
  changed_when: true
  failed_when: _certutil_gen.rc != 0
  when:
    - (not _csr_stat_pre.stat.exists) or (dirsrv_csr.force | default(false)) | bool
    - not ansible_check_mode
  tags: [tls, csr]

- name: Snapshot | CSR generate (certutil) results (test-only)
  vars:
    res: "{{ _certutil_gen }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective | default(dirsrv_csr_artifacts_root_effective), inventory_hostname] | path_join }}"
    __raw_cmd: "{{ (res.cmd | default('')) | string }}"
    __san_cmd_1: "{{ __raw_cmd | regex_replace('(?i)(-f) +[^ ]+','-f ****') }}"
    __san_cmd: "{{ __san_cmd_1 }}"
    __parts: "{{ (res.delta | default('0:0:0.0')) | regex_findall('([0-9]+)') }}"
    __dur_ms: "{{ (__parts[0] | default('0') | int) * 3600000 + (__parts[1] | default('0') | int) * 60000 + (__parts[2] | default('0') | int) * 1000 + ((__parts[3] | default('0') | int) // 1000) }}"
    __payload: |
      {{ {
          'host': inventory_hostname,
          'step': 'csr-certutil-' ~ (dirsrv_csr_instance | regex_replace('[^A-Za-z0-9_.-]','_')),
          'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
          'argv_redacted': __san_cmd,
          'rc': res.rc | default(-1),
          'stdout_excerpt': (res.stdout | default(''))[:2048],
          'stderr_excerpt': (res.stderr | default(''))[:2048],
          'duration_ms': __dur_ms
        } | to_nice_json }}
  when: dirsrv_debug | bool and ((not _csr_stat_pre.stat.exists) or (dirsrv_csr.force | default(false)) | bool) and not ansible_check_mode
  block:
    - name: Ensure local artifacts dir exists (controller)
      ansible.builtin.file:
        path: "{{ __snap_dir }}"
        state: directory
        mode: "0750"
      connection: local
      delegate_to: localhost
      become: false
    - name: Write command snapshot (csr certutil)
      ansible.builtin.copy:
        content: "{{ __payload }}"
        dest: "{{ [__snap_dir, 'cmd-csr-certutil-' ~ (dirsrv_csr_instance | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.json'] | path_join }}"
        mode: "0640"
      connection: local
      delegate_to: localhost
      become: false

- name: Normalize CSR permissions (certutil)
  ansible.builtin.file:
    path: "{{ dirsrv_csr_csr_path }}"
    owner: dirsrv
    group: dirsrv
    mode: "0640"
  when: not ansible_check_mode
  tags: [security, tls, csr]

- name: Stat CSR to compute sha256 (certutil)
  ansible.builtin.stat:
    path: "{{ dirsrv_csr_csr_path }}"
    checksum_algorithm: sha256
  register: _csr_stat_post
  tags: [tls, csr]

- name: Append result for instance (certutil)
  ansible.builtin.set_fact:
    dirsrv_csr_results: "{{ (dirsrv_csr_results | default([])) + [ {
      'cn': inventory_hostname,
      'sans': { 'dns': dirsrv_csr_dns_sans | default([]), 'ip': dirsrv_csr_ip_sans | default([]) },
      'instance': dirsrv_csr_instance,
      'tool': 'certutil',
      'tool_path': dirsrv_certutil_bin,
      'sha256': _csr_stat_post.stat.checksum | default(''),
      'generated_at': ansible_date_time.iso8601 | default(''),
      'csr_path': dirsrv_csr_csr_path
    } ] }}"
  tags: [tls, csr, artifacts]
