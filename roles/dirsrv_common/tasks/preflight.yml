---
- name: Define dsconf candidate paths
  ansible.builtin.set_fact:
    dirsrv_dsconf_candidates:
      - /usr/sbin/dsconf
      - /sbin/dsconf
      - dsconf
  tags: [preflight]

- name: Stat dsconf candidates
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ dirsrv_dsconf_candidates }}"
  register: dirsrv_dsconf_stats
  tags: [preflight]

- name: Assert dsconf is present
  ansible.builtin.assert:
    that:
      - (dirsrv_dsconf_stats.results | selectattr('stat.exists', 'equalto', true) | list | length) > 0
    fail_msg: "dsconf not found. Ensure 389-DS tools are installed."
  tags: [preflight]

- name: Select dsconf binary path
  ansible.builtin.set_fact:
    dirsrv_dsconf_bin: "{{ (dirsrv_dsconf_stats.results | selectattr('stat.exists', 'equalto', true) | map(attribute='stat.path') | list | first) | default('dsconf') }}"
  tags: [preflight]

- name: Probe dsconf export help
  ansible.builtin.command:
    argv: ["{{ dirsrv_dsconf_bin }}", "{{ dirsrv_instance }}", "backend", "export", "--help"]
  register: dirsrv_src_dsconf_export_help
  changed_when: false
  failed_when: false
  tags: [preflight]

- name: Probe dsconf import help
  ansible.builtin.command:
    argv: ["{{ dirsrv_dsconf_bin }}", "{{ dirsrv_instance }}", "backend", "import", "--help"]
  register: dirsrv_tgt_dsconf_import_help
  changed_when: false
  failed_when: false
  tags: [preflight]

- name: Derive dsconf capability flags
  ansible.builtin.set_fact:
    dirsrv_dsconf_supports_suffix: >-
      {{ ((dirsrv_src_dsconf_export_help.stdout | default('')) + ' ' + (dirsrv_src_dsconf_export_help.stderr | default(''))
          + ' ' + (dirsrv_tgt_dsconf_import_help.stdout | default('')) + ' ' + (dirsrv_tgt_dsconf_import_help.stderr | default(''))) is search('\\-\\-suffix') }}
    dirsrv_dsconf_supports_timeout_export: >-
      {{ ((dirsrv_src_dsconf_export_help.stdout | default('')) + ' ' + (dirsrv_src_dsconf_export_help.stderr | default(''))) is search('\\-\\-timeout') }}
    dirsrv_dsconf_supports_timeout_import: >-
      {{ ((dirsrv_tgt_dsconf_import_help.stdout | default('')) + ' ' + (dirsrv_tgt_dsconf_import_help.stderr | default(''))) is search('\\-\\-timeout') }}
  tags: [preflight]

- name: Build dsconf timeout argv (export)
  ansible.builtin.set_fact:
    dirsrv_dsconf_export_timeout_args: "{{ ['--timeout', (dirsrv_dsconf_timeout | string)] if (dirsrv_dsconf_supports_timeout_export | default(false)) else [] }}"
  tags: [preflight]

- name: Build dsconf timeout argv (import)
  ansible.builtin.set_fact:
    dirsrv_dsconf_import_timeout_args: "{{ ['--timeout', (dirsrv_dsconf_timeout | string)] if (dirsrv_dsconf_supports_timeout_import | default(false)) else [] }}"
  tags: [preflight]

# Optional discovery: effective instance/socket derived from dsctl when present
- name: Preflight | Discover dsctl candidates
  ansible.builtin.set_fact:
    dirsrv_dsctl_candidates:
      - /usr/sbin/dsctl
      - /sbin/dsctl
      - dsctl
  tags: [preflight]

- name: Preflight | Stat dsctl candidates
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ dirsrv_dsctl_candidates }}"
  register: dirsrv_dsctl_stats
  changed_when: false
  tags: [preflight]

- name: Preflight | Select dsctl binary path
  ansible.builtin.set_fact:
    dirsrv_dsctl_bin: "{{ (dirsrv_dsctl_stats.results | selectattr('stat.exists', 'equalto', true) | map(attribute='stat.path') | list | first) | default('dsctl') }}"
  tags: [preflight]

- name: Preflight | Detect instances via dsctl -l
  ansible.builtin.command:
    argv: ["{{ dirsrv_dsctl_bin }}", "-l"]
  register: _dsctl_list
  changed_when: false
  failed_when: false
  tags: [preflight]

- name: Preflight | Derive detected instance name from dsctl output
  ansible.builtin.set_fact:
    _dirsrv_instance_detected: >-
      {{ (((_dsctl_list.stdout | default('')) | trim) == 'slapd-localhost')
          | ternary('localhost', 'dir') }}
  tags: [preflight]

- name: Preflight | Set effective instance
  ansible.builtin.set_fact:
    dirsrv_instance_effective: >-
      {{ (dirsrv_instance is defined and (dirsrv_instance | string | length) > 0)
          | ternary(dirsrv_instance, _dirsrv_instance_detected) }}
  tags: [preflight]

- name: Preflight | Set effective ldapi socket path
  ansible.builtin.set_fact:
    dirsrv_ldapi_socket_path_effective: >-
      {{ (dirsrv_ldapi_socket_path is defined and (dirsrv_ldapi_socket_path | string | length) > 0)
          | ternary(dirsrv_ldapi_socket_path,
                    '/var/run/dirsrv/slapd-' ~ (dirsrv_instance_effective) ~ '.socket') }}
  tags: [preflight]

# DNS/TCP gating for replication targets (runs when replication topology data present)
- name: Preflight | DNS resolution for replication targets
  ansible.builtin.command:
    argv:
      - getent
      - hosts
      - "{{ dirsrv_repl_nodes[item.1.to].host }}"
  register: __dirsrv_dns_checks
  changed_when: false
  failed_when: false
  with_subelements:
    - "{{ dirsrv_repl_agreements | default({}) | dict2items }}"
    - value
  when:
    - dirsrv_repl_agreements is defined
    - dirsrv_repl_agreements | length > 0
    - dirsrv_repl_nodes is defined
    - item.1.from == inventory_hostname
  tags: [preflight]

- name: Preflight | Assert DNS resolution succeeded
  ansible.builtin.assert:
    that:
      - item.rc == 0
    fail_msg: "DNS resolution failed for {{ dirsrv_repl_nodes[item.item.1.to].host }}; fix Podman DNS or environment"
  loop: "{{ (__dirsrv_dns_checks.results | default([])) | selectattr('rc','defined') | list }}"
  when:
    - __dirsrv_dns_checks is defined
  tags: [preflight]

- name: Preflight | TCP connectivity check to replication targets
  vars:
    target: "{{ dirsrv_repl_nodes[item.1.to] }}"
  ansible.builtin.wait_for:
    host: "{{ target.host }}"
    port: "{{ target.port }}"
    timeout: 20
    sleep: 0
  register: __dirsrv_tcp_check
  changed_when: false
  failed_when: false
  with_subelements:
    - "{{ dirsrv_repl_agreements | default({}) | dict2items }}"
    - value
  when:
    - dirsrv_repl_agreements is defined
    - dirsrv_repl_agreements | length > 0
    - dirsrv_repl_nodes is defined
    - item.1.from == inventory_hostname
  tags: [preflight]

- name: Preflight | Bind ping to replication targets (SIMPLE auth)
  vars:
    agree: "{{ item.1 }}"
    target: "{{ dirsrv_repl_nodes[agree.to] }}"
    _proto: "{{ target.protocol | lower }}"
    _url: "{{ _proto }}://{{ target.host }}:{{ target.port }}"
    _max_tries: 10
  ansible.builtin.command:
    argv:
      - ldapwhoami
      - -x
      - -D
      - "{{ dirsrv_repl_auth.bind_dn }}"
      - -w
      - "{{ dirsrv_repl_auth.bind_password }}"
      - -H
      - "{{ _url }}"
  register: __dirsrv_bind_ping
  changed_when: false
  failed_when: false
  no_log: true
  until: __dirsrv_bind_ping.rc == 0
  retries: "{{ _max_tries }}"
  delay: 2
  with_subelements:
    - "{{ dirsrv_repl_agreements | default({}) | dict2items }}"
    - value
  when:
    - dirsrv_repl_agreements is defined
    - dirsrv_repl_agreements | length > 0
    - dirsrv_repl_nodes is defined
    - dirsrv_repl_auth is defined
    - dirsrv_repl_auth.method | default('SIMPLE') == 'SIMPLE'
    - item.1.from == inventory_hostname
  tags: [preflight]
