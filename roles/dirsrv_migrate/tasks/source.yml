- name: Ensure local artifact root directory exists
  ansible.builtin.file:
    path: "{{ dirsrv_artifact_root_effective }}"
    state: directory
    mode: "0750"
  connection: local
  delegate_to: localhost
  become: false

- name: Ensure local artifact directory exists for this source
  ansible.builtin.file:
    path: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
    state: directory
    mode: "0750"
  connection: local
  delegate_to: localhost
  become: false

- name: Stop LDAP instance (offline export)
  ansible.builtin.systemd:
    name: "dirsrv@{{ dirsrv_instance }}"
    state: stopped
  when: dirsrv_manage_service | bool and dirsrv_export_offline | bool

- name: Ensure LDIF directory exists on source
  ansible.builtin.file:
    path: "{{ dirsrv_base_varldif }}"
    state: directory
    mode: "0750"
    owner: dirsrv
    group: dirsrv

- name: Ensure source backends exist
  ansible.builtin.shell: >-
    dsconf {{ dirsrv_instance }} backend get-tree | grep -q '^{{ dirsrv_backends[item].suffix }}$' ||
    dsconf {{ dirsrv_instance }} backend create --suffix '{{ dirsrv_backends[item].suffix }}' --be-name '{{ item }}' || true
  args:
    executable: /bin/sh
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  failed_when: false
  when: dirsrv_manage_source_backends | bool and not ansible_check_mode

- name: Export via dsconf using --suffix (preferred)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'export']
              + (dirsrv_dsconf_export_timeout_args | default([]))
              + ['--suffix', dirsrv_backends[item].suffix, '-l', ([dirsrv_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join)] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  when: dirsrv_export_method == 'dsconf' and (dirsrv_dsconf_supports_suffix | default(false)) and not ansible_check_mode
  tags: [export]

- name: Export via dsconf using positional suffix (fallback)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'export']
              + (dirsrv_dsconf_export_timeout_args | default([]))
              + ['-l', ([dirsrv_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join), dirsrv_backends[item].suffix] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  when: dirsrv_export_method == 'dsconf' and not (dirsrv_dsconf_supports_suffix | default(false)) and not ansible_check_mode
  tags: [export]

- name: Export LDIF via ldapsearch (fallback/test)
  ansible.builtin.shell: >-
    LDAPTLS_REQCERT=never
    ldapsearch -x -H '{{ dirsrv_ldap_tcp_uri }}' \
      -D 'cn=Directory Manager' -w '{{ dirsrv_password }}' \
      -b '{{ dirsrv_backends[item].suffix }}' '(objectClass=*)' -LLL \
      > '{{ [dirsrv_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join }}'
  args:
    executable: /bin/sh
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  when: dirsrv_export_method == 'ldapsearch' and not ansible_check_mode
  tags: [export]

- name: Fetch the LDIF dumps
  ansible.builtin.fetch:
    dest: "{{ [dirsrv_artifact_root_effective, inventory_hostname, ''] | path_join }}"  # ensure trailing slash
    flat: true
    src: "{{ [dirsrv_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  when: not ansible_check_mode
  tags: [artifacts]

- name: Fix permissions on LDIF dumps
  ansible.builtin.file:
    path: "{{ [dirsrv_artifact_root_effective, inventory_hostname, 'migration-' ~ item ~ '.ldif'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ dirsrv_backends.keys() | list }}"
  when: not ansible_check_mode
  tags: [artifacts]

- name: Create archive of instance config
  ansible.builtin.command:
    argv:
      - /bin/tar
      - cjf
      - "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
      - "{{ dirsrv_base_config }}"
  changed_when: false
  when: dirsrv_collect_config | bool and not ansible_check_mode
  tags: [artifacts]

- name: Fetch the config archive
  ansible.builtin.fetch:
    src: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    dest: "{{ [dirsrv_artifact_root_effective, inventory_hostname, ''] | path_join }}"  # ensure trailing slash
    flat: true
  when: dirsrv_collect_config | bool and not ansible_check_mode
  tags: [artifacts]

- name: Fix permissions on config archive
  ansible.builtin.file:
    path: "{{ [dirsrv_artifact_root_effective, inventory_hostname, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  when: dirsrv_collect_config | bool and not ansible_check_mode
  tags: [artifacts]

- name: Start LDAP instance (offline export)
  ansible.builtin.systemd:
    name: "dirsrv@{{ dirsrv_instance }}"
    state: started
  when: dirsrv_manage_service | bool and dirsrv_export_offline | bool

- name: Remove archive of instance config on source
  ansible.builtin.file:
    path: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    state: absent
  when: dirsrv_collect_config | bool and not ansible_check_mode
