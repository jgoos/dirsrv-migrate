---
- name: Copy config archive to target node
  ansible.builtin.copy:
    dest: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    src: "{{ [dirsrv_artifact_root_effective, dirsrv_source_host, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
  when: dirsrv_collect_config | bool


- name: Ensure LDIF directory exists on target
  ansible.builtin.file:
    path: "{{ dirsrv_base_varldif }}"
    state: directory
    mode: '0750'
    owner: dirsrv
    group: dirsrv
  tags: [artifacts]
  when: not ansible_check_mode

- name: Copy LDIF dump(s) to target node
  ansible.builtin.copy:
    dest: "{{ [dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    setype: "{{ (ansible_selinux is defined and ansible_selinux.status != 'disabled') | ternary('dirsrv_var_lib_t', omit) }}"
    src: "{{ [dirsrv_artifact_root_effective, dirsrv_source_host, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  tags: [artifacts]
  when: not ansible_check_mode

- name: Gather existing backend suffixes
  ansible.builtin.command:
    argv: [ "{{ dirsrv_dsconf_bin | default('dsconf') }}", "{{ dirsrv_instance }}", "backend", "get-tree" ]
  register: _dirsrv_existing_backends
  changed_when: false
  tags: [import]
  when: not ansible_check_mode

- name: Ensure target backends exist
  ansible.builtin.command:
    argv:
      - "{{ dirsrv_dsconf_bin | default('dsconf') }}"
      - "{{ dirsrv_instance }}"
      - backend
      - create
      - "--suffix"
      - "{{ dirsrv_backends[item].suffix }}"
      - "--be-name"
      - "{{ item }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  when:
    - not ansible_check_mode
    - dirsrv_backends[item].suffix not in _dirsrv_existing_backends.stdout_lines
  register: _dirsrv_backend_create
  changed_when: _dirsrv_backend_create.rc == 0
  failed_when: _dirsrv_backend_create.rc != 0
  tags: [import]

- name: Build list of target LDIF file paths
  ansible.builtin.set_fact:
    dirsrv_ldif_files: "{{ dirsrv_backends.keys() | list | map('regex_replace', '^(.*)$', ([dirsrv_base_varldif, 'migration-' ~ '\\1' ~ '.cleaned.ldif'] | path_join)) | list }}"

- name: Clean exported data LDIFs with configured patterns
  ansible.builtin.replace:
    backup: true
    path: "{{ item.0 }}"
    regexp: "{{ item.1.regexp }}"
    replace: "{{ item.1.replace | default('') }}"
  loop: "{{ (dirsrv_ldif_files | default([])) | product(dirsrv_cleanup_patterns_data | default([])) | list }}"
  tags: [import]
  when: not ansible_check_mode

- name: Extract schema into place
  ansible.builtin.unarchive:
    src: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    dest: /
    remote_src: true
    include:
      - "etc/dirsrv/slapd-{{ dirsrv_instance }}/schema/*"
    # creates: "/etc/dirsrv/slapd-{{ dirsrv_instance }}/schema"
  when: dirsrv_collect_config | bool and not ansible_check_mode
  tags: [artifacts]

- name: Restart instance
  ansible.builtin.systemd:
    name: "dirsrv@{{ dirsrv_instance }}"
    state: restarted
  when: dirsrv_manage_service | bool and not ansible_check_mode
  tags: [import]

- name: Import via dsconf using --suffix (preferred)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'import']
              + (dirsrv_dsconf_import_timeout_args | default([]))
              + ['--suffix', dirsrv_backends[item].suffix, ([dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join)] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  when: dirsrv_dsconf_supports_suffix | default(false) and not ansible_check_mode
  tags: [import]

- name: Import via dsconf using positional suffix (fallback)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'import']
              + (dirsrv_dsconf_import_timeout_args | default([]))
              + [ dirsrv_backends[item].suffix, ([dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join) ] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  when: not (dirsrv_dsconf_supports_suffix | default(false)) and not ansible_check_mode
  tags: [import]
