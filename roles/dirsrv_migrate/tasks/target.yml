---
- name: Copy config archive to target node
  ansible.builtin.copy:
    dest: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    src: "{{ [dirsrv_artifact_root_effective, dirsrv_source_host, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
  when: dirsrv_collect_config | bool


- name: Ensure LDIF directory exists on target
  ansible.builtin.file:
    path: "{{ dirsrv_base_varldif }}"
    state: directory
    mode: '0750'
    owner: dirsrv
    group: dirsrv
  tags: [artifacts]
  when: not ansible_check_mode

- name: Copy LDIF dump(s) to target node
  ansible.builtin.copy:
    dest: "{{ [dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    setype: "{{ (ansible_selinux is defined and ansible_selinux.status != 'disabled') | ternary('dirsrv_var_lib_t', omit) }}"
    src: "{{ [dirsrv_artifact_root_effective, dirsrv_source_host, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  tags: [artifacts]
  when: not ansible_check_mode

- name: Gather existing target backends
  ansible.builtin.command:
    argv:
      - "{{ dirsrv_dsconf_bin | default('dsconf') }}"
      - "{{ dirsrv_instance }}"
      - backend
      - get-tree
  register: _dirsrv_target_backend_tree
  changed_when: false
  failed_when: _dirsrv_target_backend_tree.rc != 0
  tags: [import]
  when: not ansible_check_mode

- name: Check target backends
  ansible.builtin.command:
    argv:
      - /bin/grep
      - -F
      - "{{ dirsrv_backends[item].suffix }}"
  args:
    stdin: "{{ _dirsrv_target_backend_tree.stdout }}"
  register: _dirsrv_target_backend_grep
  loop: "{{ dirsrv_backends.keys() | list }}"
  changed_when: false
  failed_when: _dirsrv_target_backend_grep.rc not in [0, 1]
  tags: [import]
  when: not ansible_check_mode

- name: Create missing target backends
  ansible.builtin.command:
    argv:
      - "{{ dirsrv_dsconf_bin | default('dsconf') }}"
      - "{{ dirsrv_instance }}"
      - backend
      - create
      - --suffix
      - "{{ dirsrv_backends[item].suffix }}"
      - --be-name
      - "{{ item }}"
  register: _dirsrv_target_backend_create
  loop: "{{ dirsrv_backends.keys() | list }}"
  loop_control:
    index_var: idx
  changed_when: _dirsrv_target_backend_create.rc == 0
  failed_when: _dirsrv_target_backend_create.rc != 0
  tags: [import]
  when: not ansible_check_mode and _dirsrv_target_backend_grep.results[idx].rc == 1

- name: Build list of target LDIF file paths
  ansible.builtin.set_fact:
    dirsrv_ldif_files: "{{ dirsrv_backends.keys() | list | map('regex_replace', '^(.*)$', ([dirsrv_base_varldif, 'migration-' ~ '\\1' ~ '.cleaned.ldif'] | path_join)) | list }}"

- name: Clean exported data LDIFs with configured patterns
  ansible.builtin.replace:
    backup: true
    path: "{{ item.0 }}"
    regexp: "{{ item.1.regexp }}"
    replace: "{{ item.1.replace | default('') }}"
  loop: "{{ (dirsrv_ldif_files | default([])) | product(dirsrv_cleanup_patterns_data | default([])) | list }}"
  tags: [import]
  when: not ansible_check_mode

- name: Extract schema into place
  ansible.builtin.unarchive:
    src: "{{ [dirsrv_tempdir, 'dirsrv_slapd-' ~ dirsrv_instance ~ '.tar.bz2'] | path_join }}"
    dest: /
    remote_src: true
    include:
      - "etc/dirsrv/slapd-{{ dirsrv_instance }}/schema/*"
    # creates: "/etc/dirsrv/slapd-{{ dirsrv_instance }}/schema"
  when: dirsrv_collect_config | bool and not ansible_check_mode
  tags: [artifacts]

- name: Restart instance
  ansible.builtin.systemd:
    name: "dirsrv@{{ dirsrv_instance }}"
    state: restarted
  when:
    - dirsrv_manage_service | bool
    - not ansible_check_mode
    - not dirsrv_no_restart | bool
  tags: [import]

- name: Import | No-restart policy active, restart skipped (INT)
  ansible.builtin.debug:
    msg: "INT policy: restart skipped due to dirsrv_no_restart=true (post-import)."
    warn: true
  when:
    - dirsrv_manage_service | bool
    - not ansible_check_mode
    - dirsrv_no_restart | bool

- name: Import via dsconf using --suffix (preferred)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'import']
              + (dirsrv_dsconf_import_timeout_args | default([]))
              + ['--suffix', dirsrv_backends[item].suffix, ([dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join)] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  register: _dirsrv_import_preferred
  changed_when: false
  when: dirsrv_dsconf_supports_suffix | default(false) and not ansible_check_mode
  tags: [import]

- name: Import via dsconf using positional suffix (fallback)
  ansible.builtin.command:
    argv: "{{ [ dirsrv_dsconf_bin | default('dsconf'), dirsrv_instance, 'backend', 'import']
              + (dirsrv_dsconf_import_timeout_args | default([]))
              + [ dirsrv_backends[item].suffix, ([dirsrv_base_varldif, 'migration-' ~ item ~ '.cleaned.ldif'] | path_join) ] }}"
  loop: "{{ dirsrv_backends.keys() | list }}"
  register: _dirsrv_import_positional
  changed_when: false
  when: not (dirsrv_dsconf_supports_suffix | default(false)) and not ansible_check_mode
  tags: [import]

- name: Snapshot | Ensure local artifacts dir exists (controller)
  ansible.builtin.file:
    path: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
    state: directory
    mode: "0750"
  connection: local
  delegate_to: localhost
  become: false
  when: dirsrv_debug | bool

- name: Snapshot | Import command results (test-only)
  vars:
    res: "{{ item }}"
    backend: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
    __raw_cmd: "{{ (res.cmd | default('')) | string }}"
    __san_cmd: "{{ __raw_cmd }}"
    __parts: "{{ (res.delta | default('0:0:0.0')) | regex_findall('([0-9]+)') }}"
    __dur_ms: "{{ (__parts[0] | default('0') | int) * 3600000 + (__parts[1] | default('0') | int) * 60000 + (__parts[2] | default('0') | int) * 1000 + ((__parts[3] | default('0') | int) // 1000) }}"
  ansible.builtin.copy:
    content: |
      {{ {
          'host': inventory_hostname,
          'step': 'import-' ~ (backend | regex_replace('[^A-Za-z0-9_.-]','_')),
          'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
          'argv_redacted': __san_cmd,
          'rc': res.rc | default(-1),
          'stdout_excerpt': (res.stdout | default(''))[:2048],
          'stderr_excerpt': (res.stderr | default(''))[:2048],
          'duration_ms': __dur_ms
        } | to_nice_json }}
    dest: "{{ [__snap_dir, 'cmd-import-' ~ (backend | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.json'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ (_dirsrv_import_preferred.results | default([])) + (_dirsrv_import_positional.results | default([])) }}"
  when: dirsrv_debug | bool
