---
- name: Enable | Assert DM credentials provided
  ansible.builtin.assert:
    that:
      - dirsrv_dm_dn | length > 0
      - dirsrv_password | length > 0
    fail_msg: "Provide Directory Manager credentials via dirsrv_dm_dn and dirsrv_password (vault recommended)."

- name: Enable | Build local dsconf connection URL
  ansible.builtin.set_fact:
    dirsrv_repl_conn_url: >-
      {{ (dirsrv_repl_this_node.protocol | lower) ~ '://' ~ dirsrv_repl_this_node.host ~ ':' ~ dirsrv_repl_this_node.port }}

# Test-only: enable DS logs to ensure access/audit present (best-effort)
- name: Log | Enable access log (test-only)
  ansible.builtin.shell: |
    cat <<'LDIF' | ldapmodify -Y EXTERNAL -H "{{ dirsrv_ldapi_uri }}"
    dn: cn=config
    changetype: modify
    replace: nsslapd-accesslog-logging-enabled
    nsslapd-accesslog-logging-enabled: on
    LDIF
  args:
    executable: /bin/sh
  register: _log_access_on
  changed_when: _log_access_on.rc == 0
  failed_when: false
  when: dirsrv_log_capture | bool and (dirsrv_ldapi_uri | default('') | length > 0)

- name: Log | Enable audit log if supported (test-only)
  ansible.builtin.shell: |
    cat <<'LDIF' | ldapmodify -Y EXTERNAL -H "{{ dirsrv_ldapi_uri }}"
    dn: cn=config
    changetype: modify
    replace: nsslapd-auditlog-logging-enabled
    nsslapd-auditlog-logging-enabled: on
    LDIF
  args:
    executable: /bin/sh
  register: _log_audit_on
  changed_when: _log_audit_on.rc == 0
  failed_when: false
  when: dirsrv_log_capture | bool and (dirsrv_ldapi_uri | default('') | length > 0)

- name: Enable | Ensure suffix mapping tree exists (safe)
  ansible.builtin.command:
    argv:
      - dsconf
      - "{{ dirsrv_repl_this_node.instance }}"
      - backend
      - create
      - --suffix
      - "{{ item }}"
      - --be-name
      - userRoot
  register: dirsrv_repl_suffix_ensure
  changed_when: dirsrv_repl_suffix_ensure.rc == 0
  failed_when: >-
    dirsrv_repl_suffix_ensure.rc != 0 and
    (
      'already exists' not in (
        (dirsrv_repl_suffix_ensure.stdout | lower | default('')) + ' ' +
        (dirsrv_repl_suffix_ensure.stderr | lower | default(''))
      )
    ) and (
      'mapping tree' not in (
        (dirsrv_repl_suffix_ensure.stdout | lower | default('')) + ' ' +
        (dirsrv_repl_suffix_ensure.stderr | lower | default(''))
      )
    ) and (
      'exists' not in (
        (dirsrv_repl_suffix_ensure.stdout | lower | default('')) + ' ' +
        (dirsrv_repl_suffix_ensure.stderr | lower | default(''))
      )
    )
  loop: "{{ dirsrv_repl_suffixes }}"

- name: Enable | Assert replica-id present for suppliers/hubs
  vars:
    repl_role: >-
      {{ 'supplier' if dirsrv_repl_this_node.role in ['supplier','hub'] else 'consumer' }}
    replica_map: "{{ dirsrv_repl_replica_ids[item] | default({}) }}"
    repl_id: "{{ replica_map.get(inventory_hostname) }}"
  ansible.builtin.assert:
    that:
      - repl_role != 'supplier' or (repl_id is defined and (repl_id | int) >= 1 and (repl_id | int) <= 65534)
    fail_msg: "Replica ID required for supplier/hub on suffix {{ item }} (host {{ dirsrv_repl_this_node.host }})"
  loop: "{{ dirsrv_repl_suffixes }}"
  loop_control:
    label: "{{ item }} -> role={{ repl_role }}"
  when:
    - dirsrv_repl_suffixes | length > 0

# Test-only: Pre-enable state snapshots
- name: State | Pre-enable replica state (JSON)
  ansible.builtin.command: >-
    dsconf -D "{{ dirsrv_dm_dn }}" -w "{{ dirsrv_password }}" {{ dirsrv_repl_conn_url }}
    -j replication get --suffix "{{ item }}"
  register: _pre_repl_get
  changed_when: false
  failed_when: false
  no_log: "{{ not (dirsrv_debug | default(false) | bool) }}"
  loop: "{{ dirsrv_repl_suffixes }}"
  when: dirsrv_debug | bool

- name: Snapshot | Ensure local artifacts dir exists (controller)
  ansible.builtin.file:
    path: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
    state: directory
    mode: "0750"
  connection: local
  delegate_to: localhost
  become: false
  when: dirsrv_debug | bool

- name: Artifacts | Write pre-enable replica state
  vars:
    res: "{{ item }}"
    suffix: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
  ansible.builtin.copy:
    content: "{{ res.stdout | default('') }}"
    dest: "{{ [__snap_dir, 'state-pre-enable-replica-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.json'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ _pre_repl_get.results | default([]) }}"
  when: dirsrv_debug | bool


- name: Enable | Ensure replication enabled via module
  vars:
    repl_role: >-
      {{ 'supplier' if dirsrv_repl_this_node.role in ['supplier','hub'] else 'consumer' }}
    replica_map: "{{ dirsrv_repl_replica_ids[item] | default({}) }}"
    repl_id: "{{ replica_map.get(inventory_hostname) }}"
  directories.ds.ds_repl_enable:
    instance: "{{ dirsrv_repl_this_node.instance }}"
    suffix: "{{ item }}"
    role: "{{ repl_role }}"
    replica_id: "{{ repl_id if (repl_role == 'supplier' or repl_role == 'hub') else omit }}"
    conn_url: "{{ dirsrv_repl_conn_url }}"
    dm_dn: "{{ dirsrv_dm_dn }}"
    dm_pw: "{{ dirsrv_password }}"
  register: dirsrv_repl_enable
  loop: "{{ dirsrv_repl_suffixes }}"
  loop_control:
    label: "{{ item }} -> role={{ repl_role }}"
  when:
    - dirsrv_repl_suffixes | length > 0

- name: Snapshot | Replication enable results (test-only)
  vars:
    res: "{{ item }}"
    suffix: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
  ansible.builtin.copy:
    content: |
      {{ {
          'host': inventory_hostname,
          'step': 'repl-enable-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')),
          'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
          'changed': res.changed | default(false),
          'details': res.details | default({})
        } | to_nice_json }}
    dest: "{{ [__snap_dir, 'module-repl-enable-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.json'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ dirsrv_repl_enable.results | default([]) }}"
  when:
    - dirsrv_debug | bool

# Verification via dsconf JSON is handled inside the module

- name: Snapshot | Replication get (post-enable) results (test-only)
  vars:
    res: "{{ item }}"
    suffix: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
    __raw_cmd: "{{ (res.cmd | default('')) | string }}"
    __san_cmd: "{{ __raw_cmd | regex_replace('(?i)(-w) +[^ ]+','-w ****') }}"
    __parts: "{{ (res.delta | default('0:0:0.0')) | regex_findall('([0-9]+)') }}"
    __dur_ms: "{{ (__parts[0] | default('0') | int) * 3600000 + (__parts[1] | default('0') | int) * 60000 + (__parts[2] | default('0') | int) * 1000 + ((__parts[3] | default('0') | int) // 1000) }}"
  ansible.builtin.copy:
    content: |
      {{ {
          'host': inventory_hostname,
          'step': 'repl-get-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')),
          'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
          'argv_redacted': __san_cmd,
          'rc': res.rc | default(-1),
          'stdout_excerpt': (res.stdout | default(''))[:2048],
          'stderr_excerpt': (res.stderr | default(''))[:2048],
          'duration_ms': __dur_ms
        } | to_nice_json }}
    dest: "{{ [__snap_dir, 'cmd-repl-get-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.json'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ dirsrv_repl_enable_get.results | default([]) }}"
  when:
    - dirsrv_debug | bool

- name: State | Agreements list (post-enable, text)
  vars:
    suffix: "{{ item }}"
  ansible.builtin.command:
    argv:
      - dsconf
      - -D
      - "{{ dirsrv_dm_dn }}"
      - -w
      - "{{ dirsrv_password }}"
      - "{{ dirsrv_repl_conn_url }}"
      - repl-agmt
      - list
      - --suffix
      - "{{ suffix }}"
  register: _post_agmt_list
  changed_when: false
  failed_when: false
  no_log: "{{ not (dirsrv_debug | default(false) | bool) }}"
  loop: "{{ dirsrv_repl_suffixes }}"
  when: dirsrv_debug | bool

- name: Artifacts | Write agreements list (text)
  vars:
    res: "{{ item }}"
    suffix: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
  ansible.builtin.copy:
    content: "{{ res.stdout | default('') }}"
    dest: "{{ [__snap_dir, 'state-post-enable-agreements-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.txt'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ _post_agmt_list.results | default([]) }}"
  when: dirsrv_debug | bool

- name: State | Mapping tree (post-enable)
  vars:
    suffix: "{{ item }}"
  ansible.builtin.command:
    argv:
      - ldapsearch
      - -Y
      - EXTERNAL
      - -H
      - "{{ dirsrv_ldapi_uri }}"
      - -s
      - base
      - -LLL
      - -b
      - 'cn={{ suffix | replace("=","\\3D") | replace(",","\\2C") }},cn=mapping tree,cn=config'
      - \*
  register: _post_mapping
  changed_when: false
  failed_when: false
  loop: "{{ dirsrv_repl_suffixes }}"
  when: dirsrv_debug | bool and (dirsrv_ldapi_uri | default('') | length > 0)

- name: Artifacts | Write mapping tree (LDIF)
  vars:
    res: "{{ item }}"
    suffix: "{{ item.item }}"
    __snap_dir: "{{ [dirsrv_artifact_root_effective, inventory_hostname] | path_join }}"
  ansible.builtin.copy:
    content: "{{ res.stdout | default('') }}"
    dest: "{{ [__snap_dir, 'state-post-enable-mapping-tree-' ~ (suffix | regex_replace('[^A-Za-z0-9_.-]','_')) ~ '.ldif'] | path_join }}"
    mode: "0640"
  connection: local
  delegate_to: localhost
  become: false
  loop: "{{ _post_mapping.results | default([]) }}"
  when: dirsrv_debug | bool and (dirsrv_ldapi_uri | default('') | length > 0)

# Lab-only: remove consumer suffix-level referrals that can mask empty local state
- name: Enable | Get replication config (may include referrals) per suffix
  vars:
    suffix: "{{ item }}"
  ansible.builtin.command: >-
    dsconf -D "{{ dirsrv_dm_dn }}" -w "{{ dirsrv_password }}" {{ dirsrv_repl_conn_url }}
    -j replication get --suffix "{{ suffix }}"
  register: dirsrv_repl_repl_get
  changed_when: false
  failed_when: false
  no_log: true
  loop: "{{ dirsrv_repl_suffixes }}"
  when:
    - dirsrv_repl_this_node.role == 'consumer'
    - rhds_disable_referrals | default(false)

- name: Enable | Build referral removal matrix
  vars:
    _suffix: "{{ item.item }}"
    _urls: >-
      {{ (
            (
              ((item.stdout | length > 0) and (item.stdout is search('^{')))
            ) | ternary(
              ((item.stdout | from_json).replication.refs | default([])),
              []
            )
          )
          +
          (item.stdout | regex_findall('Referral\\s*:\\s*(\\S+)'))
          | unique
      }}
  ansible.builtin.set_fact:
    dirsrv_repl_refs_matrix: >-
      {{ (dirsrv_repl_refs_matrix | default([])) + [ { 'suffix': _suffix, 'refs': _urls } ] }}
  loop: "{{ dirsrv_repl_repl_get.results | default([]) }}"
  when:
    - dirsrv_repl_this_node.role == 'consumer'
    - rhds_disable_referrals | default(false)

- name: Enable | Remove consumer referrals (lab only)
  ansible.builtin.command: >-
    dsconf -D "{{ dirsrv_dm_dn }}" -w "{{ dirsrv_password }}" {{ dirsrv_repl_conn_url }}
    replication set --suffix "{{ item.0.suffix }}" --repl-del-ref {{ item.1 }}
  register: dirsrv_repl_del_ref
  changed_when: dirsrv_repl_del_ref.rc == 0
  failed_when: false
  no_log: true
  with_subelements:
    - "{{ dirsrv_repl_refs_matrix | default([]) }}"
    - refs
  when:
    - dirsrv_repl_this_node.role == 'consumer'
    - rhds_disable_referrals | default(false)

- name: Enable | Read mapping-tree state/referral (lab only)
  ansible.builtin.command:
    argv:
      - ldapsearch
      - -Y
      - EXTERNAL
      - -H
      - "{{ dirsrv_ldapi_uri }}"
      - -s
      - base
      - -LLL
      - -b
      - "cn={{ item | replace('=','\\3D') | replace(',','\\2C') }},cn=mapping tree,cn=config"
      - nsslapd-state
      - nsslapd-referral
  register: dirsrv_repl_map_read
  changed_when: false
  failed_when: false
  loop: "{{ dirsrv_repl_suffixes }}"
  when:
    - rhds_disable_referrals | default(false)
    - dirsrv_ldapi_uri | default('') | length > 0

- name: Enable | Compute mapping-tree adjustments needed
  ansible.builtin.set_fact:
    _dirsrv_map_actions: >-
      {{ (_dirsrv_map_actions | default([])) + [
          {
            'suffix': item.item,
            'need_state': not (item.stdout is search('^nsslapd-state:\\s*backend', multiline=True)),
            'has_ref': (item.stdout is search('^nsslapd-referral:', multiline=True))
          }
        ]
      }}
  loop: "{{ dirsrv_repl_map_read.results | default([]) }}"
  when:
    - rhds_disable_referrals | default(false)

- name: Enable | Force mapping-tree state to backend (lab only)
  ansible.builtin.shell: |
    cat <<'LDIF' | ldapmodify -Y EXTERNAL -H "{{ dirsrv_ldapi_uri }}"
    dn: cn={{ item.suffix | replace('=','\\3D') | replace(',','\\2C') }},cn=mapping tree,cn=config
    changetype: modify
    replace: nsslapd-state
    nsslapd-state: backend
    LDIF
  args:
    executable: /bin/sh
  register: dirsrv_repl_mapstate_backend
  changed_when: dirsrv_repl_mapstate_backend.rc == 0
  failed_when: false
  no_log: true
  loop: "{{ _dirsrv_map_actions | default([]) }}"
  when:
    - rhds_disable_referrals | default(false)
    - dirsrv_ldapi_uri | default('') | length > 0
    - item.need_state | bool

- name: Enable | Remove mapping-tree referral (lab only)
  ansible.builtin.shell: |
    cat <<'LDIF' | ldapmodify -Y EXTERNAL -H "{{ dirsrv_ldapi_uri }}"
    dn: cn={{ item.suffix | replace('=','\\3D') | replace(',','\\2C') }},cn=mapping tree,cn=config
    changetype: modify
    delete: nsslapd-referral
    LDIF
  args:
    executable: /bin/sh
  register: dirsrv_repl_mapref_del
  changed_when: dirsrv_repl_mapref_del.rc == 0
  failed_when: false
  no_log: true
  loop: "{{ _dirsrv_map_actions | default([]) }}"
  when:
    - rhds_disable_referrals | default(false)
    - dirsrv_ldapi_uri | default('') | length > 0
    - item.has_ref | bool

- name: Enable | Restart instance after mapping-tree changes (lab only)
  ansible.builtin.command:
    argv:
      - dsctl
      - "{{ dirsrv_repl_this_node.instance }}"
      - restart
  register: dirsrv_repl_restart
  changed_when: dirsrv_repl_restart.rc == 0
  failed_when: false
  when:
    - rhds_disable_referrals | default(false)
    - (
        (dirsrv_repl_mapstate_backend is defined and (dirsrv_repl_mapstate_backend.results | default([]) | length) > 0) or
        (dirsrv_repl_mapref_del is defined and (dirsrv_repl_mapref_del.results | default([]) | length) > 0)
      )

- name: Enable | Ensure replication manager exists (SIMPLE)
  directories.ds.ds_repl_manager:
    instance: "{{ dirsrv_repl_this_node.instance }}"
    name: "replication manager"
    password: "{{ dirsrv_repl_auth.bind_password }}"
    verify: true
  no_log: true
  when:
    - dirsrv_repl_auth.method == 'SIMPLE'
    - dirsrv_repl_auth.bind_dn | lower == 'cn=replication manager,cn=config'

## Password ensured by ds_repl_manager above

## Password ensured by ds_repl_manager above

- name: Enable | Authorize inbound supplier bind DN(s) on this node
  vars:
    suffix: "{{ item.0.key }}"
    agree: "{{ item.1 }}"
  directories.ds.ds_repl_binddn_auth:
    instance: "{{ dirsrv_repl_this_node.instance }}"
    suffix: "{{ suffix }}"
    bind_dn: "{{ dirsrv_repl_auth.bind_dn }}"
    state: present
  with_subelements:
    - "{{ dirsrv_repl_agreements | dict2items }}"
    - value
  when:
    - dirsrv_repl_auth.method == 'SIMPLE'
    - agree.to == inventory_hostname

- name: Enable | Ensure inbound bind DN present on this node for each suffix (SIMPLE)
  directories.ds.ds_repl_binddn_auth:
    instance: "{{ dirsrv_repl_this_node.instance }}"
    suffix: "{{ item }}"
    bind_dn: "{{ dirsrv_repl_auth.bind_dn }}"
    state: present
  loop: "{{ dirsrv_repl_suffixes }}"
  when:
    - dirsrv_repl_auth.method == 'SIMPLE'

- name: Verify | Replication manager entry exists (guarded)
  ansible.builtin.command:
    argv:
      - ldapsearch
      - -x
      - -D
      - "{{ dirsrv_dm_dn }}"
      - -w
      - "{{ dirsrv_password }}"
      - -H
      - "{{ dirsrv_repl_conn_url }}"
      - -b
      - cn=config
      - -s
      - sub
      - "(&(objectClass=nsSimpleSecurityObject)(cn=replication manager))"
      - dn
  register: dirsrv_repl_mgr_search
  changed_when: false
  failed_when: dirsrv_repl_mgr_search.rc != 0
  when:
    - dirsrv_repl_verify_post_enable | bool
    - dirsrv_repl_auth.method == 'SIMPLE'

- name: Verify | Replication manager can bind (guarded)
  ansible.builtin.command:
    argv:
      - ldapwhoami
      - -x
      - -D
      - "{{ dirsrv_repl_auth.bind_dn }}"
      - -w
      - "{{ dirsrv_repl_auth.bind_password }}"
      - -H
      - "{{ dirsrv_repl_conn_url }}"
  register: dirsrv_repl_mgr_bind
  changed_when: false
  failed_when: dirsrv_repl_mgr_bind.rc != 0
  no_log: true
  when:
    - dirsrv_repl_verify_post_enable | bool
    - dirsrv_repl_auth.method == 'SIMPLE'

- name: Verify | Allowed bind DN present for each suffix (guarded)
  vars:
    suffix: "{{ item }}"
  ansible.builtin.command: >-
    dsconf -j -D "{{ dirsrv_dm_dn }}" -w "{{ dirsrv_password }}" {{ dirsrv_repl_conn_url }}
    replication get --suffix "{{ suffix }}"
  register: dirsrv_repl_get_cfg
  changed_when: false
  failed_when: >-
    (dirsrv_repl_get_cfg.rc != 0) or
    (
      (
        ((dirsrv_repl_get_cfg.stdout | from_json).attrs.nsds5replicabinddn | default([])) | map('lower') | list
      ) is not contains (dirsrv_repl_auth.bind_dn | lower)
    )
  loop: "{{ dirsrv_repl_suffixes }}"
  when:
    - dirsrv_repl_verify_post_enable | bool
    - dirsrv_repl_auth.method == 'SIMPLE'
