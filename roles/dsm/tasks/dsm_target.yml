---
- name: Copy config archive to target node
  ansible.builtin.copy:
    dest: "{{ [dsm_tempdir, 'dirsrv_slapd-' ~ dsm_instance ~ '.tar.bz2'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    src: "{{ [dsm_artifact_root_effective, dsm_source_host, 'dirsrv_slapd-' ~ dsm_instance ~ '.tar.bz2'] | path_join }}"
  when: dsm_collect_config | bool


- name: Ensure LDIF directory exists on target
  ansible.builtin.file:
    path: "{{ dsm_base_varldif }}"
    state: directory
    mode: '0750'
    owner: dirsrv
    group: dirsrv

- name: Copy LDIF dump(s) to target node
  ansible.builtin.copy:
    dest: "{{ [dsm_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join }}"
    group: dirsrv
    mode: '0640'
    owner: dirsrv
    setype: "{{ (ansible_selinux is defined and ansible_selinux.status != 'disabled') | ternary('dirsrv_var_lib_t', omit) }}"
    src: "{{ [dsm_artifact_root_effective, dsm_source_host, 'migration-' ~ item ~ '.ldif'] | path_join }}"
  loop: "{{ dsm_backends.keys() | list }}"

- name: Ensure target backends exist
  ansible.builtin.shell: >-
    dsconf {{ dsm_instance }} backend get-tree | grep -q '^{{ dsm_backends[item].suffix }}$' \
    || dsconf {{ dsm_instance }} backend create --suffix '{{ dsm_backends[item].suffix }}' --be-name '{{ item }}' || true
  args:
    executable: /bin/sh
  loop: "{{ dsm_backends.keys() | list }}"
  changed_when: false
  failed_when: false

- name: Build list of target LDIF file paths
  ansible.builtin.set_fact:
    dsm_ldif_files: "{{ dsm_backends.keys() | list | map('regex_replace', '^(.*)$', ([dsm_base_varldif, 'migration-' ~ '\\1' ~ '.ldif'] | path_join)) | list }}"

- name: Clean exported data LDIFs with configured patterns
  ansible.builtin.replace:
    backup: true
    path: "{{ item.0 }}"
    regexp: "{{ item.1.regexp }}"
    replace: "{{ item.1.replace | default('') }}"
  loop: "{{ (dsm_ldif_files | default([])) | product(dsm_cleanup_patterns_data | default([])) | list }}"

- name: Extract schema into place
  ansible.builtin.unarchive:
    src: "{{ [dsm_tempdir, 'dirsrv_slapd-' ~ dsm_instance ~ '.tar.bz2'] | path_join }}"
    dest: /
    remote_src: true
    include:
      - "etc/dirsrv/slapd-{{ dsm_instance }}/schema/*"
    # creates: "/etc/dirsrv/slapd-{{ dsm_instance }}/schema"
  when: dsm_collect_config | bool

- name: Restart instance
  ansible.builtin.systemd:
    name: "dirsrv@{{ dsm_instance }}"
    state: restarted
  when: dsm_manage_service | bool

- name: Import data
  ansible.builtin.command:
    argv:
      - /usr/sbin/dsconf
      - "{{ dsm_instance }}"
      - backend
      - import
      - "{{ dsm_backends[item].suffix }}"
      - "{{ [dsm_base_varldif, 'migration-' ~ item ~ '.ldif'] | path_join }}"
  loop: "{{ dsm_backends.keys() | list }}"
  changed_when: false
