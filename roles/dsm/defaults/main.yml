---
# Default variables for DSM role.
# Override via inventory/group_vars. Secrets (e.g., dsm_password) must come from Ansible Vault.
# Note: Package installation is handled by a separate role; this role assumes
# required packages (e.g., 389-ds-base) are already present on targets.

dsm_instance: dir
dsm_tempdir: /var/tmp

dsm_base_var: "/var/lib/dirsrv/slapd-{{ dsm_instance }}"
dsm_base_varldif: "/var/lib/dirsrv/slapd-{{ dsm_instance }}/ldif"
dsm_base_config: "/etc/dirsrv/slapd-{{ dsm_instance }}"
dsm_base_log: "/var/log/dirsrv/slapd-{{ dsm_instance }}"
dsm_dse_ldif: "etc/dirsrv/slapd-{{ dsm_instance }}/dse.ldif"

dsm_backends:
  userroot:
    suffix: "o=example"


# Local artifact staging for migrations (on controller)
dsm_artifact_root: "{{ playbook_dir }}/.ansible/artifacts"

# Optional subdirectory label for artifacts to avoid overwrites across runs.
# Example: set to a timestamp or change ticket, e.g. "2024-09-01-audit".
# Leave empty for idempotent reruns that update the same files.
dsm_artifact_run: ""

# Effective artifact root that includes optional run label when provided.
# When empty, resolves to dsm_artifact_root.
dsm_artifact_root_effective: >-
  {{ ([dsm_artifact_root, dsm_artifact_run] | path_join)
     if (dsm_artifact_run | default('') | length > 0)
     else dsm_artifact_root }}

# Control service management (helpful in containers without systemd)
dsm_manage_service: true

# Path to dsctl (will be detected in site.yml pre_tasks; default works on many systems)
dsm_dsctl_bin: /sbin/dsctl

# Export method per vendor guidance (RHDS 12)
# Options: 'dsconf' (recommended), 'ldapsearch' (test/container fallback)
dsm_export_method: dsconf

# If true, stop/start instance around export (offline). Default false for dsconf export.
dsm_export_offline: false

# dsconf URI to connect to the instance. Default to LDAP on localhost.
# For containers, you can use LDAPI: ldapi://%2Fdata%2Frun%2Fslapd-<instance>.socket
dsm_dsconf_uri: ldap://localhost:389

# Collect and transfer instance config archive (for schema extraction)
dsm_collect_config: true

# Manage backends on source (create if missing) — disabled by default.
# Enable only for integration tests/containers.
dsm_manage_source_backends: false

# Source → Target host mapping (override in group_vars)
# Example:
# dsm_host_map:
#   rhds11.example.com: rhds12.example.com
dsm_host_map: {}

# Cleanup patterns for configuration DSE LDIF (multi-line regex allowed)
# Each item: { name: <id>, regexp: <pattern>, replace: <string default ''> }
dsm_cleanup_patterns_dse:
  - name: remove_replication_agreements
    regexp: "(?ms)^dn: cn=replica,.*?(?=^dn: |\\Z)"
    replace: ""

# Cleanup patterns for exported backend LDIFs (applied on target before import)
dsm_cleanup_patterns_data: []
