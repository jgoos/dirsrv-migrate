---
- name: Seed test data in containers (Podman only)
  hosts: dirsrv_source
  gather_facts: false
  vars:
    instance: "{{ dirsrv_instance | default(inventory_hostname) }}"
    ldapi_uri: "ldapi://%2Fdata%2Frun%2Fslapd-{{ instance }}.socket"
    example_ldif: "/root/example.ldif"
    suffix: "dc=example,dc=com"

  pre_tasks:
    - name: Guard | Ensure Podman connection is used
      ansible.builtin.assert:
        that:
          - ansible_connection is defined
          - ansible_connection == 'containers.podman.podman'
        fail_msg: "This seed play is for Podman test containers only."

  tasks:
    - name: Ensure base entry exists (dc=example,dc=com)
      block:
        - name: Check base entry presence
          ansible.builtin.command:
            argv:
              - ldapsearch
              - -Y
              - EXTERNAL
              - -H
              - "{{ ldapi_uri }}"
              - -s
              - base
              - -b
              - "dc=example,dc=com"
              - 1.1
          register: base_check
          changed_when: false
          failed_when: false

        - name: Create base entry when missing
          ansible.builtin.shell: |
            cat <<'LDIF' | ldapadd -Y EXTERNAL -H "{{ ldapi_uri }}"
            dn: dc=example,dc=com
            objectClass: top
            objectClass: domain
            dc: example
            LDIF
          args:
            executable: /bin/sh
          register: base_add
          changed_when: base_add.rc == 0
          failed_when: false
          when: base_check.rc != 0

        - name: Ensure parent OUs exist (people, groups, applications)
          ansible.builtin.shell: |
            cat <<'LDIF' | ldapadd -Y EXTERNAL -H "{{ ldapi_uri }}"
            dn: ou=people,dc=example,dc=com
            objectClass: top
            objectClass: organizationalUnit
            ou: people

            dn: ou=groups,dc=example,dc=com
            objectClass: top
            objectClass: organizationalUnit
            ou: groups

            dn: ou=applications,dc=example,dc=com
            objectClass: top
            objectClass: organizationalUnit
            ou: applications
            LDIF
          args:
            executable: /bin/sh
          register: ous_add
          changed_when: ous_add.rc == 0
          failed_when: false
          when: base_check.rc != 0

    - name: Wait | ldapi readiness (with snapshot on failure)
      block:
        - name: Wait for ldapi to be ready
          ansible.builtin.command:
            argv:
              - ldapsearch
              - -Y
              - EXTERNAL
              - -H
              - "{{ ldapi_uri }}"
              - -s
              - base
              - -b
              - ''
              - '(objectClass=*)'
          register: ldapi_ready
          changed_when: false
          retries: 120
          delay: 1
          until: ldapi_ready.rc == 0
      rescue:
        - name: Snapshot | ldapi readiness attempt (test-only)
          vars:
            res: "{{ ldapi_ready }}"
            __snap_dir: "{{ [dirsrv_artifact_root_effective | default([playbook_dir, '.ansible', 'artifacts'] | path_join), inventory_hostname] | path_join }}"
            __raw_cmd: "{{ (res.cmd | default('')) | string }}"
            __san_cmd: "{{ __raw_cmd }}"
            __parts: "{{ (res.delta | default('0:0:0.0')) | regex_findall('([0-9]+)') }}"
            __dur_ms: "{{ (__parts[0] | default('0') | int) * 3600000 + (__parts[1] | default('0') | int) * 60000 + (__parts[2] | default('0') | int) * 1000 + ((__parts[3] | default('0') | int) // 1000) }}"
            __payload: |
              {{ {
                  'host': inventory_hostname,
                  'step': 'seed-ldapi-wait',
                  'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
                  'argv_redacted': __san_cmd,
                  'rc': res.rc | default(-1),
                  'stdout_excerpt': (res.stdout | default(''))[:2048],
                  'stderr_excerpt': (res.stderr | default(''))[:2048],
                  'duration_ms': __dur_ms
                } | to_nice_json }}
          when: (dirsrv_debug | default(false)) | bool
          block:
            - name: Ensure local artifacts dir exists (controller)
              ansible.builtin.file:
                path: "{{ __snap_dir }}"
                state: directory
                mode: "0750"
              connection: local
              delegate_to: localhost
              become: false
            - name: Write command snapshot (seed ldapi wait)
              ansible.builtin.copy:
                content: "{{ __payload }}"
                dest: "{{ [__snap_dir, 'cmd-seed-ldapi-wait.json'] | path_join }}"
                mode: "0640"
              connection: local
              delegate_to: localhost
              become: false

    - name: Ensure suffix mapping tree exists
      ansible.builtin.command:
        argv:
          - dsconf
          - "{{ instance }}"
          - backend
          - create
          - --suffix
          - "{{ suffix }}"
          - --be-name
          - userRoot
      register: _test_seed_suffix_create
      changed_when: _test_seed_suffix_create.rc == 0
      failed_when: >-
        _test_seed_suffix_create.rc != 0 and
        (
          'already exists' not in ((
            (_test_seed_suffix_create.stdout | lower | default('')) + ' ' +
            (_test_seed_suffix_create.stderr | lower | default(''))
          ))
          and
          'exists' not in ((
            (_test_seed_suffix_create.stdout | lower | default('')) + ' ' +
            (_test_seed_suffix_create.stderr | lower | default(''))
          ))
        )
    - name: Snapshot | dsconf ensure backend create (test-only)
      vars:
        res: "{{ _test_seed_suffix_create }}"
        __snap_dir: "{{ [dirsrv_artifact_root_effective | default([playbook_dir, '.ansible', 'artifacts'] | path_join), inventory_hostname] | path_join }}"
        __raw_cmd: "{{ (res.cmd | default('')) | string }}"
        __payload: |
          {{ {
              'host': inventory_hostname,
              'step': 'seed-backend-create',
              'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
              'argv_redacted': __raw_cmd,
              'rc': res.rc | default(-1),
              'stdout_excerpt': (res.stdout | default(''))[:2048],
              'stderr_excerpt': (res.stderr | default(''))[:2048]
            } | to_nice_json }}
      when: (dirsrv_debug | default(false)) | bool
      block:
        - name: Ensure local artifacts dir exists (controller)
          ansible.builtin.file:
            path: "{{ __snap_dir }}"
            state: directory
            mode: "0750"
          connection: local
          delegate_to: localhost
          become: false
        - name: Write command snapshot (seed backend create)
          ansible.builtin.copy:
            content: "{{ __payload }}"
            dest: "{{ [__snap_dir, 'cmd-seed-backend-create.json'] | path_join }}"
            mode: "0640"
          connection: local
          delegate_to: localhost
          become: false

    - name: Seed example LDIF (idempotent, tolerate duplicates)
      ansible.builtin.shell: |
        if [ -f "{{ example_ldif }}" ]; then
          ldapadd -c -Y EXTERNAL -H "{{ ldapi_uri }}" -f "{{ example_ldif }}" || true
        else
          exit 0
        fi
      register: seed
      changed_when: false
      failed_when: false
    - name: Snapshot | seed ldapadd command (test-only)
      vars:
        res: "{{ seed }}"
        __snap_dir: "{{ [dirsrv_artifact_root_effective | default([playbook_dir, '.ansible', 'artifacts'] | path_join), inventory_hostname] | path_join }}"
        __raw_cmd: "{{ (res.cmd | default('')) | string }}"
        __payload: |
          {{ {
              'host': inventory_hostname,
              'step': 'seed-ldapadd',
              'ts': (ansible_date_time.iso8601_micro | default("%Y-%m-%dT%H:%M:%SZ" | strftime)),
              'argv_redacted': __raw_cmd,
              'rc': res.rc | default(-1),
              'stdout_excerpt': (res.stdout | default(''))[:2048],
              'stderr_excerpt': (res.stderr | default(''))[:2048]
            } | to_nice_json }}
      when: (dirsrv_debug | default(false)) | bool
      block:
        - name: Ensure local artifacts dir exists (controller)
          ansible.builtin.file:
            path: "{{ __snap_dir }}"
            state: directory
            mode: "0750"
          connection: local
          delegate_to: localhost
          become: false

        - name: Write command snapshot (seed ldapadd)
          ansible.builtin.copy:
            content: "{{ __payload }}"
            dest: "{{ [__snap_dir, 'cmd-seed-ldapadd.json'] | path_join }}"
            mode: "0640"
          connection: local
          delegate_to: localhost
          become: false

    - name: Ensure base ACIs present on suffix (idempotent)
      block:
        - name: Check for existing ACI on base
          ansible.builtin.command:
            argv:
              - ldapsearch
              - -Y
              - EXTERNAL
              - -LLL
              - -H
              - "{{ ldapi_uri }}"
              - -s
              - base
              - -b
              - "{{ suffix }}"
              - aci
          register: base_aci
          changed_when: false
          failed_when: false

        - name: Add standard ACIs to base when missing
          ansible.builtin.shell: |
            cat <<'LDIF' | ldapmodify -Y EXTERNAL -H "{{ ldapi_uri }}"
            dn: {{ suffix }}
            changetype: modify
            add: aci
            aci: (target="ldap:///ou=people,{{ suffix }}")(targetattr="cn || sn || givenName || mail || uid") (version 3.0; acl "Allow anonymous read on basic attrs"; allow (read, search, compare) (userdn = "ldap:///anyone"); )
            -
            add: aci
            aci: (targetattr = "telephoneNumber || mobile") (version 3.0; acl "Self can edit phone numbers"; allow (write) (userdn = "ldap:///self"); )
            -
            add: aci
            aci: (target="ldap:///ou=people,{{ suffix }}")(targetattr = "mail") (version 3.0; acl "Devs can write mail"; allow (write) (groupdn = "ldap:///cn=devs,ou=groups,{{ suffix }}"); )
            LDIF
          args:
            executable: /bin/sh
          register: add_aci
          changed_when: add_aci.rc == 0
          failed_when: false
          when: not (base_aci.stdout | regex_search('^aci:', multiline=True))
        - name: Debug | Base ACI status (test-only)
          ansible.builtin.debug:
            msg: "Base aci present? {{ (base_aci.stdout | regex_search('^aci:', multiline=True)) is not none }}"
          when: (dirsrv_debug | default(false)) | bool
