---
- name: Validate source→target mapping
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Ensure mapping is defined
      ansible.builtin.assert:
        that:
          - dirsrv_host_map is mapping
          - dirsrv_host_map | length > 0
        fail_msg: "Define 'dirsrv_host_map' in group_vars with source→target pairs"

    - name: Ensure all sources are mapped and targets exist
      ansible.builtin.assert:
        that:
          - (dirsrv_host_map.keys() | difference(groups['dirsrv_source'])) | length == 0
          - (dirsrv_host_map.values() | difference(groups['dirsrv_target'])) | length == 0
        fail_msg: "All map keys must be in dirsrv_source and values in dirsrv_target"

    - name: Ensure 1:1 mapping and expected counts
      ansible.builtin.assert:
        that:
          - dirsrv_host_map | length == groups['dirsrv_source'] | length
          - (dirsrv_host_map.values() | unique | length) == (dirsrv_host_map | length)
        fail_msg: "Mapping must be 1:1 and cover all sources"

- name: Dump LDIF and config from RHDS 11 sources
  hosts: dirsrv_source
  become: true
  roles:
    - dirsrv_migrate

- name: Import data into RHDS 12 targets
  hosts: dirsrv_target
  become: true
  pre_tasks:
    - name: Determine mapped source host candidates
      ansible.builtin.set_fact:
        dirsrv_source_candidates: "{{ dirsrv_host_map | dict2items | selectattr('value', 'equalto', inventory_hostname) | map(attribute='key') | list }}"

    - name: Select mapped source host for this target
      ansible.builtin.set_fact:
        dirsrv_source_host: "{{ dirsrv_source_candidates | first }}"

    - name: Assert mapped source host is found
      ansible.builtin.assert:
        that:
          - dirsrv_source_host is defined
          - dirsrv_source_host in groups['dirsrv_source']
        fail_msg: "No matching source host found for target {{ inventory_hostname }}"

    - name: Init expected artifact vars (controller)
      ansible.builtin.set_fact:
        dirsrv_expected_ldifs: []
        dirsrv_expected_config: ""
      connection: local
      delegate_to: localhost
      become: false

    - name: Build expected LDIF artifact list (controller)
      ansible.builtin.set_fact:
        dirsrv_expected_ldifs: "{{ dirsrv_expected_ldifs + [ dirsrv_artifact_root_effective ~ '/' ~ dirsrv_source_host ~ '/migration-' ~ item ~ '.ldif' ] }}"
      loop: "{{ dirsrv_backends.keys() | list }}"
      connection: local
      delegate_to: localhost
      become: false

    - name: Build expected config artifact path (controller)
      ansible.builtin.set_fact:
        dirsrv_expected_config: "{{ dirsrv_artifact_root_effective }}/{{ dirsrv_source_host }}/dirsrv_slapd-{{ dirsrv_instance }}.tar.bz2"
      when: dirsrv_collect_config | bool
      connection: local
      delegate_to: localhost
      become: false

    - name: Build combined expected artifact list (controller)
      ansible.builtin.set_fact:
        dirsrv_expected_artifacts: "{{ dirsrv_expected_ldifs + ((dirsrv_collect_config | bool) | ternary([dirsrv_expected_config], [])) }}"
      connection: local
      delegate_to: localhost
      become: false

    - name: Stat expected artifacts on controller
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ dirsrv_expected_artifacts }}"
      register: dirsrv_artifacts_stat
      connection: local
      delegate_to: localhost
      become: false

    - name: Build missing artifact list (controller)
      ansible.builtin.set_fact:
        dirsrv_missing_artifacts: >-
          {{ dirsrv_expected_artifacts
             | zip(dirsrv_artifacts_stat.results)
             | selectattr('1.stat.exists', 'equalto', false)
             | map('first')
             | list }}

    - name: Assert all expected artifacts exist on controller
      ansible.builtin.assert:
        that:
          - (dirsrv_artifacts_stat.results | map(attribute='stat.exists') | list | min) | bool
        fail_msg: >-
          Missing artifacts on controller: {{ dirsrv_missing_artifacts }}
      when: not ansible_check_mode
  roles:
    - dirsrv_migrate
