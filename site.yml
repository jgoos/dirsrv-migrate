---
- name: Validate source→target mapping
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Ensure mapping is defined
      ansible.builtin.assert:
        that:
          - dsm_host_map is mapping
          - dsm_host_map | length > 0
        fail_msg: "Define 'dsm_host_map' in group_vars with source→target pairs"

    - name: Ensure all sources are mapped and targets exist
      ansible.builtin.assert:
        that:
          - (dsm_host_map.keys() | difference(groups['dsm_source'])) | length == 0
          - (dsm_host_map.values() | difference(groups['dsm_target'])) | length == 0
        fail_msg: "All map keys must be in dsm_source and values in dsm_target"

    - name: Ensure 1:1 mapping and expected counts
      ansible.builtin.assert:
        that:
          - dsm_host_map | length == groups['dsm_source'] | length
          - (dsm_host_map.values() | unique | length) == (dsm_host_map | length)
        fail_msg: "Mapping must be 1:1 and cover all sources"

- name: Dump LDIF and config from RHDS 11 sources
  hosts: dsm_source
  become: true
  pre_tasks:
    - name: Preflight | Define executable candidates (dsconf)
      ansible.builtin.set_fact:
        dsm_dsconf_candidates:
          - /usr/sbin/dsconf
          - /sbin/dsconf

    - name: Preflight | Stat dsconf candidates
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ dsm_dsconf_candidates }}"
      register: dsm_src_dsconf_stats

    - name: Preflight | Assert dsconf is present on source
      ansible.builtin.assert:
        that:
          - (dsm_src_dsconf_stats.results | selectattr('stat.exists', 'equalto', true) | list | length) > 0
        fail_msg: "dsconf not found on source. Install 389-DS tools."

    - name: Detect dsconf --suffix support on source (export)
      ansible.builtin.command:
        argv: ["/usr/sbin/dsconf", "{{ dsm_instance }}", "backend", "export", "--help"]
      register: dsm_src_dsconf_export_help
      changed_when: false
      failed_when: false

    - name: Set dsconf suffix support fact (source)
      ansible.builtin.set_fact:
        dsm_dsconf_supports_suffix: "{{ (dsm_src_dsconf_export_help.stdout + ' ' + dsm_src_dsconf_export_help.stderr) is search('\\-\\-suffix') }}"
  roles:
    - dsm

- name: Import data into RHDS 12 targets
  hosts: dsm_target
  become: true
  pre_tasks:
    - name: Preflight | Define executable candidates (dsconf)
      ansible.builtin.set_fact:
        dsm_dsconf_candidates:
          - /usr/sbin/dsconf
          - /sbin/dsconf

    - name: Preflight | Stat dsconf candidates
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ dsm_dsconf_candidates }}"
      register: dsm_dsconf_stats

    - name: Preflight | Assert dsconf is present on target
      ansible.builtin.assert:
        that:
          - (dsm_dsconf_stats.results | selectattr('stat.exists', 'equalto', true) | list | length) > 0
        fail_msg: "dsconf not found. Ensure 389-DS is installed by the base role."

    - name: Detect dsconf --suffix support on target (import)
      ansible.builtin.command:
        argv: ["/usr/sbin/dsconf", "{{ dsm_instance }}", "backend", "import", "--help"]
      register: dsm_tgt_dsconf_import_help
      changed_when: false
      failed_when: false

    - name: Set dsconf suffix support fact (target)
      ansible.builtin.set_fact:
        dsm_dsconf_supports_suffix: "{{ (dsm_tgt_dsconf_import_help.stdout + ' ' + dsm_tgt_dsconf_import_help.stderr) is search('\\-\\-suffix') }}"

    - name: Determine mapped source host candidates
      ansible.builtin.set_fact:
        dsm_source_candidates: "{{ dsm_host_map | dict2items | selectattr('value', 'equalto', inventory_hostname) | map(attribute='key') | list }}"

    - name: Select mapped source host for this target
      ansible.builtin.set_fact:
        dsm_source_host: "{{ dsm_source_candidates | first }}"

    - name: Assert mapped source host is found
      ansible.builtin.assert:
        that:
          - dsm_source_host is defined
          - dsm_source_host in groups['dsm_source']
        fail_msg: "No matching source host found for target {{ inventory_hostname }}"

    - name: Init expected artifact vars (controller)
      ansible.builtin.set_fact:
        dsm_expected_ldifs: []
        dsm_expected_config: ""
      connection: local
      delegate_to: localhost
      become: false

    - name: Build expected LDIF artifact list (controller)
      ansible.builtin.set_fact:
        dsm_expected_ldifs: "{{ dsm_expected_ldifs + [ dsm_artifact_root_effective ~ '/' ~ dsm_source_host ~ '/migration-' ~ item ~ '.ldif' ] }}"
      loop: "{{ dsm_backends.keys() | list }}"
      connection: local
      delegate_to: localhost
      become: false

    - name: Build expected config artifact path (controller)
      ansible.builtin.set_fact:
        dsm_expected_config: "{{ dsm_artifact_root_effective }}/{{ dsm_source_host }}/dirsrv_slapd-{{ dsm_instance }}.tar.bz2"
      when: dsm_collect_config | bool
      connection: local
      delegate_to: localhost
      become: false

    - name: Build combined expected artifact list (controller)
      ansible.builtin.set_fact:
        dsm_expected_artifacts: "{{ dsm_expected_ldifs + ((dsm_collect_config | bool) | ternary([dsm_expected_config], [])) }}"
      connection: local
      delegate_to: localhost
      become: false

    - name: Stat expected artifacts on controller
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ dsm_expected_artifacts }}"
      register: dsm_artifacts_stat
      connection: local
      delegate_to: localhost
      become: false

    - name: Build missing artifact list (controller)
      ansible.builtin.set_fact:
        dsm_missing_artifacts: >-
          {{ dsm_expected_artifacts
             | zip(dsm_artifacts_stat.results)
             | selectattr('1.stat.exists', 'equalto', false)
             | map('first')
             | list }}

    - name: Assert all expected artifacts exist on controller
      ansible.builtin.assert:
        that:
          - (dsm_artifacts_stat.results | map(attribute='stat.exists') | list | min) | bool
        fail_msg: >-
          Missing artifacts on controller: {{ dsm_missing_artifacts }}
  roles:
    - dsm
